[{"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\index.js":"1","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\reportWebVitals.js":"2","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\App.js":"3","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\shared\\dishes.js":"4","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\MainComponent.js":"5","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\DishDetailsComponent.js":"6","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\MenuComponent.js":"7","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\HeaderComponent.js":"8","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\FooterComponent.js":"9","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\HomeComponent.js":"10","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\ContactComponent.js":"11","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\shared\\comments.js":"12","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\shared\\leaders.js":"13","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\shared\\promotions.js":"14","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\AboutComponent.js":"15","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\redux\\configureStore.js":"16","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\commentForm.js":"17","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\redux\\comments.js":"18","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\redux\\ActionTypes.js":"19","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\redux\\ActionCreators.js":"20","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\redux\\dishes.js":"21","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\LoadingComponent.js":"22"},{"size":643,"mtime":1609143281397,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1607970338339,"results":"25","hashOfConfig":"24"},{"size":645,"mtime":1610472191996,"results":"26","hashOfConfig":"24"},{"size":1448,"mtime":1609738802978,"results":"27","hashOfConfig":"24"},{"size":2720,"mtime":1614962283933,"results":"28","hashOfConfig":"24"},{"size":7267,"mtime":1614962633276,"results":"29","hashOfConfig":"24"},{"size":2329,"mtime":1615042825759,"results":"30","hashOfConfig":"24"},{"size":5566,"mtime":1610214119678,"results":"31","hashOfConfig":"24"},{"size":2633,"mtime":1609179557885,"results":"32","hashOfConfig":"24"},{"size":1512,"mtime":1615042992884,"results":"33","hashOfConfig":"24"},{"size":10939,"mtime":1614354851404,"results":"34","hashOfConfig":"24"},{"size":4117,"mtime":1609738863790,"results":"35","hashOfConfig":"24"},{"size":2333,"mtime":1609938022252,"results":"36","hashOfConfig":"24"},{"size":435,"mtime":1609738829596,"results":"37","hashOfConfig":"24"},{"size":4470,"mtime":1609938489547,"results":"38","hashOfConfig":"24"},{"size":607,"mtime":1614958676740,"results":"39","hashOfConfig":"24"},{"size":4114,"mtime":1614793759138,"results":"40","hashOfConfig":"24"},{"size":501,"mtime":1614791977324,"results":"41","hashOfConfig":"24"},{"size":178,"mtime":1614958723904,"results":"42","hashOfConfig":"24"},{"size":783,"mtime":1614960030000,"results":"43","hashOfConfig":"24"},{"size":618,"mtime":1614961366213,"results":"44","hashOfConfig":"24"},{"size":256,"mtime":1614961549352,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"t452tl",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\index.js",[],["99","100"],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\reportWebVitals.js",[],["101","102"],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\App.js",[],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\shared\\dishes.js",[],["103","104"],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\MainComponent.js",["105"],"import React, { Component } from 'react'\r\nimport Home from './HomeComponent';\r\nimport Menu from './MenuComponent'\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\nimport DishDetail from './DishDetailsComponent'\r\nimport Header from './HeaderComponent'\r\nimport Footer from './FooterComponent'\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\nimport { addComment, fetchDishes } from '../redux/ActionCreators';\r\n\r\nconst mapStateToProps = state => {\r\nreturn {\r\n    dishes: state.dishes,\r\n    comments: state.comments,\r\n    promotions: state.promotions,\r\n    leaders: state.leaders\r\n}\r\n}\r\nconst mapDispatchToProps =dispatch =>({\r\n    addComment:(dishId,rating,author,comment) => dispatch(addComment(dishId,rating,author,comment)),\r\n    fetchDishes: () => {dispatch(fetchDishes())}\r\n})\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchDishes();\r\n    }\r\n    render() {\r\n\r\n    const HomePage = () => {\r\n        return(\r\n            <Home \r\n                dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n                dishesLoading = {this.props.dishes.isLoading}\r\n                dishesErrMess = {this.props.dishes.errMess}\r\n                promotion={this.props.promotions.filter((promo) => promo.featured)[0]}\r\n                leader={this.props.leaders.filter((leader) => leader.featured)[0]}\r\n            />\r\n        );\r\n    }\r\n\r\n    const DishWithId = ({match}) => {\r\n        return(\r\n            <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]} \r\n                isLoading = {this.props.dishes.isLoading}\r\n                errMess = {this.props.dishes.errMess}\r\n                comments={this.props.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))} \r\n                addComment = {this.props.addComment}\r\n                />\r\n        );\r\n    };\r\n\r\n    return (\r\n    <div>\r\n        <Header />\r\n        <div>\r\n        <Switch>\r\n            <Route path='/home' component={HomePage} />\r\n            <Route exact path='/aboutus' component={() => <About leaders={this.props.leaders} />} />\r\n            <Route exact path='/menu' component={() => <Menu dishes={this.props.dishes} />} />\r\n            <Route path='/menu/:dishId' component={DishWithId} />\r\n            <Route exact path='/contactus' component={Contact} />\r\n            <Redirect to=\"/home\" />\r\n        </Switch>\r\n        </div>\r\n        <Footer />\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(Main));","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\DishDetailsComponent.js",["106","107","108","109"],"import React, { Component } from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem, Button, Modal, ModalHeader, ModalBody, Row, Col, Label } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Loading } from './LoadingComponent';\r\n\r\n    function RenderDish({dish}) {\r\n        return (\r\n            <Card>\r\n                <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\r\n                <CardBody>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                    <CardText>{dish.description}</CardText>\r\n                </CardBody>\r\n            </Card>\r\n        );\r\n    }\r\n    function RenderComments({comments, addComment, dishId}) {\r\n        var commentList = comments.map(comment => {\r\n            return (\r\n                <li key={comment.id} >\r\n                    {comment.comment}\r\n                    <br /><br />\r\n                    -- {comment.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comment.date)))}\r\n                    <br /><br />\r\n                </li>\r\n            );\r\n        });\r\n        return (\r\n            <div>\r\n                <h4>Comments</h4>\r\n                <ul className=\"list-unstyled\">\r\n                    {commentList}\r\n                </ul>\r\n                <CommentForm dishId={dishId} addComment={addComment} />\r\n            </div>\r\n        );\r\n    }\r\n    const DishDetail = props => {\r\n                if (props.isLoading) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <Loading />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.errMess) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <h4>{props.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.dish != null) {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n                            <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                        <div className=\"col-12\">\r\n                            <h3>{props.dish.name}</h3>\r\n                            <hr/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-5 m-1\">\r\n                            <RenderDish dish={props.dish} />\r\n                        </div>\r\n                        <div className=\"col-12 col-md-5 m-1\">\r\n                            <RenderComments comments={props.comments} addComment={props.addComment} dishId={props.dish.id} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            return (\r\n                <div></div>\r\n            );\r\n        }\r\n    }\r\nexport default DishDetail;\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nexport class CommentForm extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    toggleModal() {\r\n        this.setState({ isModalOpen: !this.state.isModalOpen });\r\n    }\r\n    handleSubmit(values){\r\n        this.toggleModal();\r\n        this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <span className=\"fa fa-pencil fa-lg\"> Submit comment</span>\r\n                </Button>\r\n                <div className=\"row row-content\">\r\n                    <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                        <ModalHeader toggle={this.toggleModal}> Submit comment</ModalHeader>\r\n                        <ModalBody>\r\n                            <div className=\"col-12 col-md-9\">\r\n                                <LocalForm onSubmit={(values) => this.handleSubmit(values)} >\r\n                                    <Row className=\"form-group\">\r\n                                        <Label htmlFor=\"rating\">Rating</Label>\r\n                                        <Col md={10}>\r\n                                            <Control.select model=\".rating\" name=\"rating\" className=\"form-control\" >\r\n                                                <option>1</option>\r\n                                                <option>2</option>\r\n                                                <option>3</option>\r\n                                                <option>4</option>\r\n                                                <option>5</option>\r\n                                            </Control.select>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"form-group\">\r\n                                        <Label htmlFor=\"author\" md={2}>Your name</Label>\r\n                                        <Col md={10}>\r\n                                            <Control.text model=\".author\" id=\"author\" name=\"author\" placeholder=\"Author\" className=\"form-control\" validators={{ required, minLength:  minLength(3), maxLength: maxLength(15)}} />\r\n                                            <Errors className=\"text-danger\" model=\".author\" show=\"touched\" messages={{ required: 'Required', minLength: 'Must be greater than 3 characters', maxLength: 'Must be 15 charaters or less'}} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row className=\"form-group\">\r\n                                        <Label htmlFor=\"feedback\" md={2}>Your feedback</Label>\r\n                                        <Col md={10}>\r\n                                            <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\" rows=\"6\" className=\"form-control\" validators={{ required }} />\r\n                                            <Errors className=\"text-danger\" model=\".comment\" show=\"touched\" messages={{ required: 'Required'}} />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\r\n                                </LocalForm>\r\n                            </div>\r\n                        </ModalBody>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\MenuComponent.js",[],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\HeaderComponent.js",[],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\FooterComponent.js",[],["110","111"],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\HomeComponent.js",[],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\ContactComponent.js",["112","113","114","115","116","117","118"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form'; \r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\nclass Contact extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        alert('Current State is: ' + JSON.stringify(values));\r\n    }\r\n\r\n    render() {\r\n        // const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email);\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>                \r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                    <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                            <h5>Our Address</h5>\r\n                            <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                            </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\" href=\"https://twitter.com/Moon20003918\"><i className=\"fa fa-twitter\"></i> Twitter</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                   <div className=\"col-12\">\r\n                      <h3>Send us your Feedback</h3>\r\n                   </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength:minLength(3), maxLength:maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     /> \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength:minLength(3), maxLength:maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     /> \r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength:minLength(11), maxLength:maxLength(13), isNumber\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be equal 11 numbers',\r\n                                            maxLength: 'Must be 13 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\" className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}> \r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\"/>\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" \r\n                                        className=\"form-control\"\r\n                                        name=\"contactType\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"className=\"form-control\"></Control.textarea>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </div>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\shared\\comments.js",[],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\shared\\leaders.js",[],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\shared\\promotions.js",[],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\AboutComponent.js",[],["119","120"],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\redux\\configureStore.js",[],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\commentForm.js",["121","122","123"],"import React , {Component} from 'react';\r\nimport {Button,Row,Col,Label,Modal,ModalHeader, ModalBody} from 'reactstrap';\r\nimport {Control, LocalForm, Errors} from 'react-redux-form';\r\n// import CommentForm from './commentForm';\r\n\r\nconst maxLength=(len)=>(val)=>!(val)||(val.length <= len);\r\nconst minLength=(len)=>(val)=> val && (val.length>=len);\r\n\r\nclass CommentForm extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            isModalOpen: false\r\n        }\r\n        this.toggleModal=this.toggleModal.bind(this);\r\n    }\r\n\r\n        handleSubmit(val) {\r\n            // alert(\"Current State = \"+ JSON.stringify(val));\r\n            this.toggleModal();\r\n            this.props.addComment(this.props.dishId, val.rating, val.author, val.comment);\r\n        }\r\n\r\n        toggleModal(){\r\n            this.setState({\r\n                isModalOpen: !this.state.isModalOpen\r\n            })\r\n    }\r\n    render(){\r\n        return(\r\n          <div className=\"container\">   \r\n            <Button outline onClick={this.toggleModal}><span className=\"fa fa-pencil\"></span> Submit Comment</Button>\r\n            <Modal isOpen={this.state.isModalOpen}>\r\n                <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                <ModalBody >\r\n                        <LocalForm onSubmit={(val)=>this.handleSubmit(val)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label md htmlFor=\"rating\">Rating</Label>\r\n                                <Col md={12}>\r\n                                    <Control.select  model=\".rating\" id=\"rating\" name=\"rating\"\r\n                                        className=\"form-control\">\r\n                                    <option>1</option>\r\n                                    <option>2</option>\r\n                                    <option>3</option>\r\n                                    <option>4</option>\r\n                                    <option>5</option>\r\n                                    </Control.select>\r\n                                 </Col>   \r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md htmlFor=\"author\">Your Name</Label>\r\n                                <Col md={12}>\r\n                                    <Control.text model=\".author\" id=\"author\" name=\"author\" placeholder=\"Your Name\" \r\n                                    className=\"form-control\"\r\n                                    validators={{\r\n                                        minLength: minLength(2), maxLength: maxLength(15)\r\n                                    }}\r\n                                    />\r\n                                    <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".author\"\r\n                                    show=\"touched\"\r\n                                        messages={{\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label md htmlFor=\"comment\">Comment</Label>\r\n                                <Col md={12}>\r\n                                    <Control.textarea model=\".comment\" name=\"comment\" rows=\"6\"\r\n                                    placeholder=\"Comment\"\r\n                                    className=\"form-control\"\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Button className=\"mt-3\" type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\r\n                        </LocalForm>\r\n                </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CommentForm; ","C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\redux\\comments.js",[],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\redux\\ActionTypes.js",[],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\redux\\ActionCreators.js",[],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\redux\\dishes.js",[],"C:\\Users\\Emboss\\Desktop\\fedw-my-app\\src\\components\\LoadingComponent.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"124","replacedBy":"128"},{"ruleId":"126","replacedBy":"129"},{"ruleId":"124","replacedBy":"130"},{"ruleId":"126","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":28,"column":5,"nodeType":"134","messageId":"135","endLine":31,"endColumn":6},{"ruleId":"136","severity":1,"message":"137","line":2,"column":25,"nodeType":"138","messageId":"139","endLine":2,"endColumn":39},{"ruleId":"140","severity":1,"message":"141","line":124,"column":45,"nodeType":"142","endLine":124,"endColumn":117},{"ruleId":"140","severity":1,"message":"143","line":136,"column":45,"nodeType":"142","endLine":136,"endColumn":226},{"ruleId":"140","severity":1,"message":"144","line":143,"column":45,"nodeType":"142","endLine":143,"endColumn":170},{"ruleId":"124","replacedBy":"145"},{"ruleId":"126","replacedBy":"146"},{"ruleId":"140","severity":1,"message":"143","line":72,"column":37,"nodeType":"142","endLine":78,"endColumn":39},{"ruleId":"140","severity":1,"message":"143","line":94,"column":37,"nodeType":"142","endLine":100,"endColumn":39},{"ruleId":"140","severity":1,"message":"143","line":116,"column":37,"nodeType":"142","endLine":122,"endColumn":39},{"ruleId":"140","severity":1,"message":"143","line":139,"column":37,"nodeType":"142","endLine":144,"endColumn":39},{"ruleId":"140","severity":1,"message":"147","line":161,"column":45,"nodeType":"142","endLine":162,"endColumn":79},{"ruleId":"140","severity":1,"message":"141","line":168,"column":37,"nodeType":"142","endLine":170,"endColumn":60},{"ruleId":"140","severity":1,"message":"144","line":179,"column":37,"nodeType":"142","endLine":180,"endColumn":75},{"ruleId":"124","replacedBy":"148"},{"ruleId":"126","replacedBy":"149"},{"ruleId":"140","severity":1,"message":"141","line":41,"column":37,"nodeType":"142","endLine":42,"endColumn":66},{"ruleId":"140","severity":1,"message":"143","line":54,"column":37,"nodeType":"142","endLine":59,"endColumn":39},{"ruleId":"140","severity":1,"message":"144","line":74,"column":37,"nodeType":"142","endLine":77,"endColumn":39},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],["150"],["151"],["150"],["151"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'CardImgOverlay' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE",["150"],["151"],"Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["150"],["151"],"no-global-assign","no-unsafe-negation"]